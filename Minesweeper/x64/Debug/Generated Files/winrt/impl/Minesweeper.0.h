// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_Minesweeper_0_H
#define WINRT_Minesweeper_0_H
WINRT_EXPORT namespace winrt::Minesweeper
{
    struct IsfmlMain;
    struct sfmlMain;
}
namespace winrt::impl
{
    template <> struct category<winrt::Minesweeper::IsfmlMain>{ using type = interface_category; };
    template <> struct category<winrt::Minesweeper::sfmlMain>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Minesweeper::sfmlMain> = L"Minesweeper.sfmlMain";
    template <> inline constexpr auto& name_v<winrt::Minesweeper::IsfmlMain> = L"Minesweeper.IsfmlMain";
    template <> inline constexpr guid guid_v<winrt::Minesweeper::IsfmlMain>{ 0x5CEA2FEE,0xD2DF,0x5D15,{ 0x8A,0xE7,0x94,0x93,0x94,0xFD,0xEE,0x83 } }; // 5CEA2FEE-D2DF-5D15-8AE7-949394FDEE83
    template <> struct default_interface<winrt::Minesweeper::sfmlMain>{ using type = winrt::Minesweeper::IsfmlMain; };
    template <> struct abi<winrt::Minesweeper::IsfmlMain>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Minesweeper_IsfmlMain
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::Minesweeper::IsfmlMain>
    {
        template <typename D> using type = consume_Minesweeper_IsfmlMain<D>;
    };
}
#endif
